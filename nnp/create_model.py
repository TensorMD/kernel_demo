import numpy as np

data = {
    "rmax": np.float64(6.0),
    "nelt": np.int32(1),
    "masses": np.array([95.95], dtype=np.float64),
    "numbers": np.array([77, 111], dtype=np.int32),
    "tdnp": np.int32(0),
    "use_fnn": np.int32(1),
    "fnn::nlayers": np.int32(3),
    "fnn::layer_sizes": np.array([32, 64], dtype=np.int32),
    "fnn::actfn": np.int32(3),
    "fnn::use_resnet_dt": np.int32(0),
    "fnn::apply_output_bias": np.int32(0),
    "fnn::weights_0_0": np.random.rand(1, 32).astype(np.float64),
    "fnn::biases_0_0": np.random.rand(32).astype(np.float64),
    "fnn::weights_0_1": np.random.rand(32, 64).astype(np.float64),
    "fnn::biases_0_1": np.random.rand(64).astype(np.float64),
    "fnn::weights_0_2": np.random.rand(64, 128).astype(np.float64),
    "fnn::biases_0_2": np.random.rand(128).astype(np.float64),
    "fnn::num_filters": np.int32(128),
    "nlayers": np.int32(5),
    "max_moment": np.int32(3),
    "actfn": np.int32(3),
    "fctype": np.int32(0),
    "layer_sizes": np.array([128, 128, 128, 128, 1], dtype=np.int32),
    "use_resnet_dt": np.int32(1),
    "apply_output_bias": np.int32(1),
    "weights_0_0": np.random.rand(512, 128).astype(np.float64),
    "biases_0_0": np.random.rand(128).astype(np.float64),
    "weights_0_1": np.random.rand(128, 128).astype(np.float64),
    "biases_0_1": np.random.rand(128).astype(np.float64),
    "weights_0_2": np.random.rand(128, 128).astype(np.float64),
    "biases_0_2": np.random.rand(128).astype(np.float64),
    "weights_0_3": np.random.rand(128, 128).astype(np.float64),
    "biases_0_3": np.random.rand(128).astype(np.float64),
    "weights_0_4": np.random.rand(128, 1).astype(np.float64),
    "biases_0_4": np.random.rand(1).astype(np.float64),
}

np.savez("Mo_fp64_large.npz", **data)
